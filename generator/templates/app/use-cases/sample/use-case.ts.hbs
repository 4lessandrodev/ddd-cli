import { IUseCase, Result } from 'types-ddd';
import MyRepo from '@modules/{{dashCase moduleName}}/domain/interfaces/repository.interface';
import Model from '@modules/{{dashCase moduleName}}/domain/interfaces/model.interface';
import Aggregate from '@modules/{{dashCase moduleName}}/domain/aggregate';

export interface UseCaseDto {
	data: string;
}

export class {{pascalCase className}}UseCase implements IUseCase<UseCaseDto, Result<void>> {
	constructor(private readonly repo: MyRepo<Aggregate, Model>){}
	async execute(dto: UseCaseDto): Promise<Result<void>> {
		try {

			// your code ...

			return Result.Ok();
		} catch (error: any) {
			return Result.fail(error.message);
		}
	}
}

export default {{pascalCase className}}UseCase;
